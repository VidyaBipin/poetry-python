#!/usr/bin/env python

import os

from poetry.core.packages import Dependency
from poetry.core.utils._compat import Path
from poetry.core.factory import Factory
from poetry.core.utils.toml_file import TomlFile as TOMLFile


def main():
    project_directory = Path(__file__).parent.parent.parent
    project = Factory().create_poetry(project_directory)

    requires = []
    for requirement in project.package.requires:  # type: Dependency
        requires.append(requirement.to_pep_508())

    toml = TOMLFile(project_directory / "pyproject.toml")
    original = toml.read()
    pyproject = toml.read()

    briefcase = {
        "project_name": project.package.name,
        "bundle": "org.python-poetry.console",
        "version": project.package.version.text,
        "url": project.package.homepage,
        "license": "MIT license",
        "author": project.package.author_name,
        "author_email": project.package.author_email,
        "app": {
            project.package.name: {
                "formal_name": project.package.name,
                "description": project.package.description,
                "icon": "poetry/resources/poetry",
                "sources": ["poetry"],
                "requires": requires,
                "linux": {"requires": []},
                "windows": {"requires": []},
                "macOS": {"requires": []},
            }
        }
    }

    pyproject["tool"].append("briefcase", briefcase)  # noqa

    briefcase_toml = project_directory / "briefcase.toml"
    with briefcase_toml.open(mode="w") as f:
        f.write("")

    snippet = TOMLFile(briefcase_toml)
    data = snippet.read()
    data.append("tool", {"briefcase": briefcase})  # noqa
    snippet.write(data)

    print("Using Briefcase Config:")
    print(data.as_string())

    toml.write(pyproject)
    cwd = Path()

    try:
        os.chdir(project_directory.as_posix())
        os.system("briefcase package")
    except OSError:
        print("Build failed")
    finally:
        os.chdir(cwd.as_posix())
        toml.write(original)


if __name__ == "__main__":
    main()
